load_commands([
  function(cmd, term, next) {
    // JUJU SWITCH
    // juju switch
    // juju switch <env>
    var s = cmd.match('^juju switch$');
    var se = cmd.match('^juju switch (.*)');

    if(!s && !se) {
      return next();
    }

    if(!window.file.exists('~/.juju/environments.yaml')) {
      return term.error("ERROR couldn't read the environment");
    }

    var cur_env = window.file.open('~/.juju/current-environment');
    if(!cur_env) {
      cur_env = 'amazon';
    }

    if(se) {
      window.file.save('~/.juju/current-environment', se[1]);
      return term.echo("{0} -> {1}".format(cur_env, se[1]));
    }

    term.echo(cur_env);
  },
  function(cmd, term, next) {
    // JUJU STATUS
    // juju status
    // juju status -e <env>
    var m = cmd.match('^juju status(?: -e ([a-zA-Z0-9]+)| )?(.*)');
    if(!m) {
      return next();
    }

    var environment = null,
        storage = $.localStorage,
        filter_on = false;

    if(m[1]) {
      environment = m[1];
    } else if(window.file.exists('~/.juju/current-environment')) {
      environment = window.file.open('~/.juju/current-environment');
    }

    if(m[2]) {
      filter_on = m[2].replace(/ +/g, ' ').split(' ');
    }

    if(!environment) {
      return term.error('error: open ~/.juju/environments.yaml: no such file or directory');
    }

    if(!storage.isSet(environment)) {
      term.error('ERROR Unable to connect to environment {0}'.format(environment));
      term.error('');
      term.error("Please check your credentials or use 'juju bootstrap' to create a new environment.");
      return;
    }

    var d = new Deployment(storage.get(environment));
    return term.echo(jsyaml.dump(d.status(filter_on)).trim());
  },
  function(cmd, term, next) {
    // JUJU ADD-UNIT
    // juju add-unit <service>
    // juju add-unit -n # <service>

    // var m = cmd.match('^juju add-unit ?(-n [0-9]+ |--num-units [0-9]+ )([a-z0-9]+)');
    var m = cmd.match('^juju add-unit ([a-z0-9]+)');
    if(!m) {
      return next();
    }

    var service = null,
        environment = null,
        num_units = 1,
        storage = $.localStorage;
/*

    if(m[1]) {
      num_units = m[1].split(' ')[2];
    }
    service = m[2];
*/
    service = m[1];

    if(!service) {
      return term.error('error: no service specified');
    }

    if(num_units < 1) {
      return term.error('error: --num-units must be a positive integer');
    }

    environment = window.file.open('~/.juju/current-environment');

    if(!environment) {
      term.error('ERROR Unable to connect to environment {0}'.format(environment));
      term.error('');
      term.error("Please check your credentials or use 'juju bootstrap' to create a new environment.");
      return;
    }

    try {
      var deployment = new Deployment(storage.get(environment));
      deployment.add_unit(service, num_units);
    } catch(e) {
      return term.error('ERROR: {0}'.format(e));
    }

    term.echo('Added {0} units of {1}'.format(num_units, service));
    return storage.set(environment, deployment);
  },
  function(cmd, term, next) {
    // JUJU BOOTSTRAP
    // juju bootstrap
    // juju bootstrap -e <env>
    var m = cmd.match('^juju bootstrap(?:$| -e ([a-zA-Z0-9]+))');
    if(!m) {
      return next();
    }
    var environment = null,
        deployment = null,
        storage = $.localStorage;
    if(m[1]) {
      environment = m[1];
    } else if(window.file.exists('~/.juju/current-environment')) {
      environment = window.file.open('~/.juju/current-environment');
    }

    if(!environment) {
      return term.error('error: open ~/.juju/environments.yaml: no such file or directory');
    }

    if(storage.isSet(environment)) {
      return term.error('ERROR {0} is already bootstrapped'.format(environment));
    }

    try {
      deployment = new Deployment(environment);
      deployment.bootstrap();
    } catch(e) {
      return term.error('ERROR {0}'.format(e));
    }

    term.pause();
    term.echo('Launching instance');
    term.echo(' - {0}'.format(deployment.machines['0']['dns-name']));
    term.echo('Waiting for address');
    setTimeout(function() {
      term.echo('Attempting to connect to :22');
    }, 500);
    setTimeout(function() {
      term.echo('Running apt-get update');
      term.echo('Running apt-get upgrade');
    }, 1000);
    setTimeout(function() {
      term.echo('Bootstrapping Juju machine agent');
    }, 1800);
    setTimeout(function() {
      term.echo('Starting Juju machine agent (jujud-machine-0)');
      term.resume();
    }, 2100);

    return storage.set(environment, deployment);
  },
  function(cmd, term, next) {
    // juju get
    var m = cmd.match('^juju get(?:$| ([a-z_-]+))$');
    if(!m) {
      return next();
    }

    var environment = null,
        deployment = null,
        storage = $.localStorage;

    if(!m[1]) {
      return term.echo("error: no service name specified");
    }
    service = m[1];

    environment = window.file.open('~/.juju/current-environment');

    deployment = new Deployment(storage.get(environment));
    if(deployment.is_deployed(service)) {
      get_charm(service, function(err, charm_data) {
        if(err) {
          term.error(err);
        }
        try {
          term.pause();

          $.each(deployment.config[service], function(index, opt) {
            term.echo('\t{0}:'.format(index));
            term.echo("\t\tdefault: {0}".format(opt.default));
            term.echo("\t\tdescription: {0}".format(opt.description));
            term.echo("\t\ttype: {0}".format(opt.type));
            term.echo("\t\tvalue: {0}".format(opt.value));
          });

          term.resume();
        } catch(e) {
          term.error('ERROR during deploy: {0}'.format(e));
          term.resume();
          return;
        }

      });
      return;
    }
  },
  function(cmd, term, next) {
    // juju set

    var m = cmd.match('^juju set ([a-z0-9_-]+)');
    if(!m) {
      return next();
    }
    service = m[1];
    var environment = null,
        deployment = null,
        storage = $.localStorage;

    environment = window.file.open('~/.juju/current-environment');

    deployment = new Deployment(storage.get(environment));
    if(!deployment.is_deployed(service)) {
      term.error('ERROR service "{0}" not found'.format(service));
      return;
    }

    m = cmd.match('^juju set {0} ([a-z0-9_-]+)=(["a-z0-9-_]+)$'.format(service));
    if(m && m[1] && m[2]) {
      deployment.set(service, m[1], m[2]);
      storage.set(environment, deployment);
    }
    return;

  },
  function(cmd, term, next) {
    // JUJU INIT
    // juju init
    // juju generate
    if(!cmd.match("^juju (init|generate-config)$")) {
      return next();
    }
    if(window.file.exists('~/.juju/environments.yaml')) {
      return term.echo("ERROR A juju environment configuration already exists.");
    }

    window.file.save("~/.juju/environments.yaml", "default: hey\n  amazon:\n    key: val\n  academy:\n    user: test\n    value: demo");
    term.echo("A boilerplate environment configuration file has been written to ~/.juju/environments.yaml.\nEdit the file to configure your juju environment and run bootstrap.");
  },
  function(cmd, term, next) {
    // JUJU ADD-RELATION
    // juju add-RELATION <service> <service>
    var m = cmd.match('^juju add-relation?(?: | -e ([a-z0-9A-Z]+) )([a-z0-9]+) ([a-z0-9]+)$');
    if(!m) {
      return next();
    }

    var environment = null,
        storage = $.localStorage;

    if(!m[2] || !m[3]) {
      term.error('error: no service specified');
    }

    if(!environment) {
      if(!window.file.exists('~/.juju/current-environment')) {
        return term.error('Unable to find environment, did you run juju switch?');
      }
      environment = window.file.open('~/.juju/current-environment');
    }

    if(!storage.isSet(environment)) {
      term.error('ERROR Unable to connect to environment {0}'.format(environment));
      term.error('');
      term.error("Please check your credentials or use 'juju bootstrap' to create a new environment.");
      return;
    }

    try {
      var deployment = new Deployment(storage.get(environment));
    } catch(e) {
      term.error('ERROR during Deployment: {0}'.format(e));
    }

    try {
      deployment.relate(m[2], m[3]);
    } catch(e) {
      term.error('error: {0}'.format(e));
    }

    storage.set(environment, deployment);
  },
  function(cmd, term, next) {
    /**
     * JUJU IS
     * juju is
     **/
    if(!cmd.match('^juju is$')) {
      return next();
    }

    return term.echo('fucking amazing');
  },
  function(cmd, term, next) {
    // JUJU DEPLOY
    // juju deploy <charm>
    // juju deploy -e <env> <charm>
    // juju deploy --to <m> <charm>
    // juju deploy -n|--num-units <#> <charm>
    if(!cmd.match('^juju deploy (.*)')) {
      return next();
    }

    var options = {'to': null, 'num-units': 1, 'environment': null},
        raw = cmd.replace('juju deploy ', '').split(' '),
        deployment = null,
        storage = $.localStorage;
    while(raw.length > 0) {
      var key = raw.shift();
      if(key.startsWith('-')) {
        // Long option, it's an object index
        if(key.startsWith('--')) {
          key = key.replace('--', '');
        } else {
          switch(key.replace('-', '')) {
            case 'e':
              key = 'environment';
              break;
            case 'n':
              key = 'num-units';
              break;
            default:
              term.echo('WARNING: Unrecognized short parameter, skipping');
              continue;
              break;
          }
        }
        options[key] = raw.unshift();
      } else {
        // TODO: Alias deployments
        options.charm = key;
      }
    }

    if(!options.charm) {
      term.error('error: no charm specified');
    }

    if(!options.environment) {
      if(!window.file.exists('~/.juju/current-environment')) {
        return term.error('Unable to find environment, did you run juju switch?');
      }
      options.environment = window.file.open('~/.juju/current-environment');
    }

    if(!storage.isSet(options.environment)) {
      term.error('ERROR Unable to connect to environment {0}'.format(environment));
      term.error('');
      term.error("Please check your credentials or use 'juju bootstrap' to create a new environment.");
      return;
    }

    try {
      deployment = new Deployment(storage.get(options.environment));
    } catch(e) {
      term.error('ERROR during Deployment: {0}'.format(e));
    }

    term.pause();
    get_charm(options.charm, function(err, charm_data) {
      if(err) {
        term.error(err);
      }
      try {
        deployment.deploy(charm_data.name, charm_data, options.to, options.num_units);
      } catch(e) {
        term.error('ERROR during deploy: {0}'.format(e));
        term.resume();
        return;
      }

      term.echo('Added charm "{0}" to the environment.'.format(charm_data.url));
      term.resume();
      storage.set(options.environment, deployment);
    });
  },
  function(cmd, term, next) {
    // juju
    // juju help
    // juju help <topic>
    var help_match = cmd.match('^juju help(?:$| ([a-z]+)$)');
    if(!cmd.match('^juju$') && !help_match) {
      return next();
    }

    var help_url = 'assets/man/juju';
    if(help_match && help_match[1]) {
      help_url = help_url + '-' + help_match[1];
    }

    term.pause();
    $.ajax(help_url, {
      'success': function(data) {
        $.each(data.trim().split('\n'), function(i, l) {
          term.echo(l);
        });
      },
      'error': function() {
        term.error('ERROR unknown command or topic for {0}'.format(help_match[1]));
      }
    }).done(function() {
      term.resume();
    });
  },
  function(cmd, term, next) {
    // juju expose service_name
    // juju unexpose service_name

    // Match both the expose and unexpose commands.
    var service_name = cmd.match('^juju (expose|unexpose) (.*)');
    // No match go to next function.
    if (!service_name){
      return next();
    }
    // No service name provided.
    if (!service_name[2]){
      term.error('error: no service name specified');
      return;
    }
    // Get the current environment.
    var environment = window.file.open('~/.juju/current-environment');
    // Get access to browser storage.
    var storage = $.localStorage;
    if(!storage.isSet(environment)) {
      term.error('ERROR environment is not bootstrapped');
      return;
    }
    // Get the deployment for an environment.
    var d = new Deployment(storage.get(environment));
    if (service_name[2] in d.services) {
      var exposed = service_name[1] == "expose";
      d.services[service_name[2]].exposed = exposed;
      storage.set(environment, d);
    } else {
      term.error('ERROR service ' + service_name[2] + ' not found');
    }
  },
  function(cmd, term, next) {
    if(!cmd.match('^juju (remove-service|destroy-service)(.*)$')) {
      return next();
    }

    var m = cmd.match('^juju (remove-service|destroy-service) (.*)');
    var service;
    try {
      service = m[2];
    } catch(e) {
      service = false;
    }

    if(!service) {
      return term.error('error: no service specified');
    }

    var environment = window.file.open('~/.juju/current-environment');
    var storage = $.localStorage;
    if(!storage.isSet(environment)) {
      term.error('ERROR environment is not bootstrapped');
      return;
    }

    // Get the deployment for an environment.
    var d = new Deployment(storage.get(environment));
    try {
      d.destroy_service(service);
    } catch(e) {
      return term.error(e);
    }
    storage.set(environment, d);
  },
  function(cmd, term, next) {
    // JUJU ?
    if(!cmd.match("^juju .*$")) {
      return next();
    }

    var action = cmd.split(' ')[1];
    term.error("Sorry, {0} hasn't been implemented yet or action doesn't exist".format(action));
  }
]);
